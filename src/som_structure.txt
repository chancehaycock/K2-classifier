def make_2D_SOM_from_lightcurve(test_campaign_num, training_file, dimension=2,
                                plot_kohonen=False, plot_SOM=False,
                                write_to_csv=False, save_plots=False, detrending='k2sc'):

	# ===============================
	# Variables needed for SOM object
	# ===============================

	# Size of SOM Map. 40x40 for visual. 1600x1 for RF
	som_shape = SOM_shape(dimension)

	# Chose at complete random - seems sufficient
	n_iter = 25

	# Number of features (Will be number of bins of phase folded lightcurve)
	n_bins = 64

	# ===============================
	#     Process Training Data
	# ===============================
	# Requires a nice clean training set.
	# We will do this by restricting this set to ones with sufficiently large
	# probabilties.
	train_df, train_samples = get_training_samples(project_dir, detrending, training_file)

	som_samples_df, som_samples = get_som_samples(train_df, train_samples, test_campaign_num, detrending, training_file)

	# Here, we have a som_samples array ready for mapping with 64 bins.
#	print(train_df)
#	print(som_samples)

	# ===============================
	#      Initialise SOM Object 
	# ===============================

	# Initial Distribution in Kohonen Layer. Uniform.
	def init(som_samples):
		# Add seed for reproducible kohonen layer. Easier than saving it.
		np.random.seed(5)
		return np.random.uniform(0, 2, size=(som_shape[0], som_shape[1], n_bins))

	# Initialise SOM Object
	som = SimpleSOMMapper(som_shape, n_iter, initialization_func=init)

	# ===============================
	#         TRAIN The SOM
	# ===============================

	print("Training SOM...")
	som.train(train_samples)
	print("SOM Trained.")

	# ===============================
	# Option to Plot the Kohonen Layer
	# ===============================
	#  At this point, SOM is trained, and there are templates setup.
	# The user has the option to plot it here.

	if (plot_kohonen):
		plot_kohonen_layer(som, n_bins, som_shape, save_plots, project_dir, kohonen_ofile=training_file)


	# ===============================
	# Map test samples onto trained SOM
	# ===============================
	# Then at this point, we map the new sample to the best matching pixel.
	# This MAP is now an array of triples (best_x, best_y, distance_to_them)

	print("Mapping samples to the SOM, and calculating bmus...")
	map = som(som_samples)
	print("BMU's calculated for whole sample.")

	# ==========================
	#   Option to Plot SOM 
	# ==========================

	if (plot_SOM):
		plot_som(map, som_samples_df, som_shape, save_plots, project_dir, som_ofile=training_file)


	# ==========================
	#   Process SOM DISTANCES
	# ==========================
	# Now we process distances to return to the user as a csv file.
	# Need to return arry of len(som_samples) with entries
	# [rr_dist, ea_dist, eb_dist, gdor/dscut_dist, template_dist]

	# Judged by eye - using seed=5
	# RRab, EA, EB, GDOR/DSCUT
#	clusters = [[11, 13], [31, 21], [31, 6], [13, 33]] - INTERIM
	clusters = [[13, 29], [29, 29], [1, 29], [9, 9]] # alpha

	if write_to_csv:
		if test_campaign_num == -1:
			print("Invalid Test Campaign Number. Exiting...")
			return
		process_som_statistics(map, som_samples_df, som_shape, clusters, project_dir, test_campaign_num, detrending, training_file)

	# Return dataframe for possible later work.
	print("Program Complete.")
	return som_samples_df 
